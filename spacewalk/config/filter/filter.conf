#
# SUSE Manager
#


filter {

  # empty
  if ([message] == "") { drop {} }

  if ([type] == "rhn_web_api") {
    # Spacewalk rhn_web_api.log
    grok {
      # [2015-04-01 14:17:13,420] INFO  - REQUESTED FROM: 127.0.0.1 CALL: api.getVersion() CALLER: (none) TIME: 0.006 seconds
      # [2015-07-03 11:40:33,378] ERROR - REQUESTED FROM: 10.122.53.112 CALL: proxy.list_available_proxy_channels(<?xml version=\"1.0\"?>
      # [2016-06-27 10:32:38,489] ERROR - REQUESTED FROM: 10.10.191.100 CALL: sync.content.synchronizeChannels(260x7aa024b4cdf93293f923f1bddcbba29e, ) CALLER: (admin) TIME: 0.019 seconds
      # [2016-06-14 08:07:07,598] ERROR - postProcess error
      # 2017-04-20 09:47:52,802 [localhost-startStop-1] WARN  org.hibernate.cache.EhCacheProvider - Could not find configuration [com.redhat.rhn.domain.common.ChecksumType]; using defaults.        
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => {
        "message" => "%{RHN_WEB_API}"
      }
    }
    date {
      # http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "access_log") {
    # apache2 access_log

    grok {
      # 10.122.53.112 - - [10/Jul/2016:14:15:12 +0200] "POST /XMLRPC HTTP/1.1" 200 126
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{ACCESS_LOG}" }
    }
    date {
      # 10/Jul/2016:14:15:40 +0200
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "error_log") {
    # apache2 error_log


    grok {
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{ERROR_LOG}" }
    }
    date {
      # [Thu Jun 15 10:02:00.019492 2017]
      match => [ "timestamp" , "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "osa-dispatcher") {
    # osa-dispatcher.log

    grok {
      # 2015/06/12 11:39:04 +02:00 14117 0.0.0.0: osad/jabber_lib.main('ERROR', 'Error caught:')
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{OSA_DISPATCHER}" }
    }
    date {
      # 2015/06/12 11:39:04 +02:00
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "rhn_server_sat") {
    # rhn_server_sat.log

    grok {
      # 2016/06/27 09:32:18 +02:00 31345 0.0.0.0: server/apacheHandler.headerParserHandler('POST /SAT HTTP/1.1',)
      # -> see osa-dispatcher
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{RHN_SERVER_SAT}" }
    }
    date {
      # 2015/06/12 11:39:04 +02:00
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "log4j") {
    # do nothing
  }
  elseif ([type] == "tomcat") {
    # do nothing
  }
  elseif ([type] == "rhn_server_xmlrpc") {
    # 2015/08/13 12:15:19 -05:00 11015 156.36.172.114: xmlrpc/queue.get(1000011146, 2, 'checkins enabled')
    grok {
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{RHN_SERVER_XMLRPC}" }
    }
    date {
      # 2015/06/12 11:39:04 +02:00
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "rhn_web_ui") {
    grok {
      patterns_dir => [ "." ]
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{RHN_WEB_UI}" }
    }
    date {
      # 2017-02-21 13:10:00,404
      match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  else {
    grok {
      match => { "message" => ".*" }
    }
    mutate {
      add_tag => [ "_grokparsefailure" ]
    }
  }

  if ("elasticsupport" in [tags]) {
    mutate {
      # host and port are from the elasticsupport system and thus useless
      # timestamp was converted to @timestamp
      remove_field => ["host", "port", "timestamp"]
    }
  }

  if ("beats_input_codec_plain_applied" in [tags]) {
    mutate {
      remove_field => ["source", "beat"]
    }
  }

  # coming from error.log
  if ([traceback]) {
    mutate {
      add_tag => ["traceback"]
    }
  }
}
